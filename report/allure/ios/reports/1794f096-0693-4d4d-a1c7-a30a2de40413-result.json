{"name": "test_validate_coin_up_down_count", "status": "broken", "statusDetails": {"message": "ValueError: invalid literal for int() with base 10: 'null'", "trace": "self = <test_ui_ux_scenario.TestScenario object at 0x10751b250>\n\n    def test_validate_coin_up_down_count(self):\n    \n>       up_coin_count, coin_down_count = self.market_page.get_text_coin_up_and_down()\n\ntest_case/test_ui_ux_scenario.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <page.market_page.MarketPage object at 0x10753a070>\n\n    def get_text_coin_up_and_down(self):\n        \"\"\"\n        Market 내 Coins are up, Coins are down 노출 및 데이터 유효성 확인\n        \"\"\"\n        time.sleep(2)\n        if self.os_type == \"ios\":\n            # 각 up, down 정규식 패턴에 포함되는 데이터 노출 확인\n            coin_up_count = self.common_page.get_text_by_keyword(\"코인up\")\n            coin_down_count = self.common_page.get_text_by_keyword(\"코인down\")\n            self.logger.info(f\"UP: {coin_up_count}, DOWN: {coin_down_count}\")\n        else :\n            # 카운트와 문자가 분리되어있어, 문자의 부모요소에서 카운트 부분을 추출하여 0 Coins are up 과 같이 단어로 조립하여 검증\n            coins_up_number_element = self.driver.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text(\"Coins are up\").fromParent(new UiSelector().className(\"android.widget.TextView\"))')\n            coins_up_number = coins_up_number_element.get_attribute('text')\n            coin_up_count = f\"{coins_up_number} Coins are up\"\n    \n            coins_down_number_element = self.driver.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'new UiSelector().text(\"Coins are down\").fromParent(new UiSelector().className(\"android.widget.TextView\"))')\n            coins_down_number = coins_down_number_element.get_attribute('text')\n            coin_down_count = f\"{coins_down_number} Coins are down\"\n    \n            self.logger.info(f\"UP: {coin_up_count}, DOWN: {coin_down_count}\")\n    \n>       up_count = int(coin_up_count.split()[0])\nE       ValueError: invalid literal for int() with base 10: 'null'\n\npage/market_page.py:156: ValueError"}, "attachments": [{"name": "log", "source": "df62a6a3-d3ae-40e3-874a-b9b900d54e2f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "43e2ebad-949d-4c37-b27e-8d2ca5e3487d-attachment.txt", "type": "text/plain"}], "start": 1728893260348, "stop": 1728893303731, "uuid": "f2c553b0-8490-4b63-8c78-75de25948c73", "historyId": "f5c3c886d96562ae18cd172f89d0fed3", "testCaseId": "f5c3c886d96562ae18cd172f89d0fed3", "fullName": "test_case.test_ui_ux_scenario.TestScenario#test_validate_coin_up_down_count", "labels": [{"name": "parentSuite", "value": "test_case"}, {"name": "suite", "value": "test_ui_ux_scenario"}, {"name": "subSuite", "value": "TestScenario"}, {"name": "host", "value": "gimgitaeui-MacBookPro.local"}, {"name": "thread", "value": "63680-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_case.test_ui_ux_scenario"}]}